---
import Layout from "@layout"
import { Picture } from "astro:assets"
import Specs from "@components/products/Specs.astro"
import Cta from "@components/Cta.astro"
import capitalizeFirstLetter from "@lib/capitalizeFirstLetter"
import products from "@/hooks/products"
import type { Product } from "@t/productTypes"

export function getStaticPaths() {
    type Path = {
        category: string
        id: string
    }

    const paths: Path[] = products.reduce((arr: Path[], category) => {
        const categoryPaths: Path[] = category.products
            .filter(({ availability, visibility }) => availability && visibility)
            .map(({ id }) => ({
                category: category.category,
                id,
            }))

        return arr.concat(categoryPaths)
    }, [])

    const params = paths.map((path) => {
        return { params: path }
    })

    return [...params]
}

const { category, id } = Astro.params
const product = products
    .find(({ category: title }) => title === category)
    ?.products.find(({ id: product }) => product === id) as Product

const images = import.meta.glob<{ default: ImageMetadata }>(
    `/src/assets/products/* - Fresh Jacuzzis.{jpeg,jpg,png,gif}`,
)
const image =
    await images[
        `/src/assets/products/${capitalizeFirstLetter(product.category ?? "")} ${product.name} - Fresh Jacuzzis.jpeg`
    ]()
---

<Layout title={`${capitalizeFirstLetter(product.category)} ${product.name} | Fresh HidroJacuzz`}>
    <section transition:name={`${product.category}-${product.id}`} class="product">
        <div class="hover-container">
            <Picture
                loading="lazy"
                src={image.default}
                formats={["avif", "webp", "jpeg"]}
                alt={`${capitalizeFirstLetter(product.category ?? "")} ${product.name} | Fresh HidroJacuzz`}
                widths={[150, 300, 600]}
                sizes="(max-width: 600px) 150px, (max-width: 1200px) 300px, 600px"
                transition:name={`${product.category}-${product.id}-img`}
            />
        </div>
        <div class="specs">
            <h1 transition:name={`${product.category}-${product.id}-title`}>
                {capitalizeFirstLetter(product.category ?? "")}
                {product.name}
            </h1>
            <Specs product={product} />
            <Cta transition:name={`${product.category}-${product.id}-btn`}>
                Cotiza ahora mismo
            </Cta>
        </div>
    </section>
    <section>
        {product.specs && <h2>Características</h2>}
        <div class="product-specs">
            {
                product.specs?.map?.(({ title, list }) => {
                    return (
                        <div class="specs-level">
                            <h3>{title}</h3>
                            <ul>
                                {list.map((spec) => (
                                    <li>{spec}</li>
                                ))}
                            </ul>
                        </div>
                    )
                })
            }
        </div>
        {product.specs && <Cta>¡Cotiza ahora!</Cta>}
    </section>
</Layout>
<style>
    .product {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin: 20px auto;
    }
    picture {
        border-radius: 10px;
        overflow: hidden;
        width: 90vw;
        height: 90vw;
    }

    img {
        width: 90vw;
        height: 90vw;
        object-fit: cover;
        border-radius: 10px;
        transition: transform 0.2s ease-out;
        will-change: transform;
    }

    img:hover {
        transform: scale(1.1);
    }
    .image-hover-container {
        position: relative;
        overflow: hidden;
        border-radius: 10px;
        width: 90vw;
        height: 90vw;
    }
    .specs {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-bottom: 10px;
        justify-content: space-around;
        align-items: center;
    }
    h1 {
        font-size: 2.5rem;
        color: var(--primary-dark);
    }

    a {
        padding: 0.5rem 1rem;
        background-color: var(--primary-color);
        color: #fff;
    }

    a:hover {
        background-color: var(--primary-dark);
        scale: 1.05;
    }
    a:active {
        scale: 0.95;
    }

    @media (min-width: 800px) {
        h1 {
            width: 30vw;
        }
        picture,
        img {
            width: 40vw;
            height: 40vw;
        }
        .product {
            flex-direction: row;
        }
        .specs {
            text-align: center;
            padding: 0 5rem;
            height: 30vw;
        }
    }

    .product-specs {
        margin-top: 2rem;
        display: flex;
        flex-flow: row wrap;
        justify-content: space-around;
    }

    .specs-level {
        margin-bottom: 1.5rem;
        width: 30%;
        min-width: 300px;
    }

    h2 {
        font-size: 2rem;
        color: var(--primary-dark);
    }

    h3 {
        font-size: 1.5rem;
        color: var(--primary-color);
    }

    ul {
        list-style-type: disc;
        padding-left: 1.5rem;
        text-align: left;
    }

    li {
        font-size: 1rem;
        color: var(--text-color);
    }
</style>
<script>
    import { $ } from "@/lib/dom-selector"

    const container = $<HTMLDataElement>(".hover-container")
    const img = $<HTMLImageElement>("img", container)

    container?.addEventListener("mousemove", (e) => {
        const rect = container.getBoundingClientRect()
        const x = (e.clientX - rect.left) / rect.width - 0.5
        const y = (e.clientY - rect.top) / rect.height - 0.5
        img && (img.style.transform = `scale(1.1) translate(${x * 20}px, ${y * 20}px)`)
    })

    container?.addEventListener("mouseleave", () => {
        img && (img.style.transform = "scale(1)")
    })
</script>
